---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import PostList from "@/components/PostList.astro";
import type { AnyEntry, BlogEntry } from "@/lib/data";
import { getCollection } from "astro:content";

//TODO: rework to group by
export async function getStaticPaths(): Promise<any> {
	const coll1: AnyEntry[] = await getCollection("docs");
	const coll2: AnyEntry[] = await getCollection("logseq");
	const allPosts = coll1.concat(coll2);
	const postsHaveTags = allPosts.filter((q) => q.data.tags);
	const postsNoTags = allPosts.filter((q) => !q.data.tags);
	const tags: Set<string> = new Set(
		postsHaveTags.map((q) => q.data.tags!).flat(),
	);
	return ["no-tag", ...tags].map((tag, idx) => ({
		params: { tag },
		props: {
			posts: idx
				? postsHaveTags.filter((post) => post.data.tags!.includes(tag))
				: postsNoTags,
		},
	}));
}

interface Props {
	posts: BlogEntry[];
}
const { tag } = Astro.params;
const isUndefined = !tag;
const header = isUndefined ? "Posts without a tag" : `Posts with #${tag}`;
const { posts } = Astro.props;
---

<StarlightPage
	frontmatter={{
		title: header,
		description: "All posts in this blog",
		template: "doc",
		tableOfContents: false,
	}}
>
	<PostList posts={posts} />
</StarlightPage>
