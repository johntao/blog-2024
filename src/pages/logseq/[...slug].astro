---
import { type CollectionEntry, getCollection } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import Tags from "@/components/Tags.astro";

export async function getStaticPaths() {
	const posts = await getCollection("logseq");
	return posts.map((post, index) => {
		const prevPost = posts[index - 1];
		const nextPost = posts[index + 1];
		post.data.prev = prevPost ? { link: prevPost.slug, label: prevPost.data.title } : undefined;
		post.data.next = nextPost ? { link: nextPost.slug, label: nextPost.data.title } : undefined;
		return {
			params: { slug: post.slug },
			props: post,
		};
	});
}

type Props = CollectionEntry<"logseq">;
const post = Astro.props;
const {
	data: {
		title,
		description,
		pubDate,
		updatedDate,
		tags,
		next,
		prev,
		heroImage,
	},
} = post;
const rendered = await post.render();
const { Content, headings, remarkPluginFrontmatter } = rendered;
// console.log('=====================', remarkPluginFrontmatter);
---

<!-- <BaseHtml title={title} description={description}>
	<header class="w-full">
		{heroImage && <img class="block mx-auto rounded-xl mb-7" width={1020} height={510} src={heroImage} alt="" />}
	</header>
</BaseHtml> -->
<StarlightPage
	headings={headings}
	frontmatter={{ title, description, next, prev }}
>
	<article class="prose max-w-3xl dark:prose-invert mx-auto">
		<header class="text-center">
			<div class="mt-3">{tags && <Tags tags={tags} withHref={true} />}</div>
			<div class="text-gray-500">
				<FormattedDate className="sm:inline" date={pubDate} /> - {
					remarkPluginFrontmatter.minutesRead
				}
				{
					updatedDate && (
						<div class="italic">
							Last updated on <FormattedDate date={updatedDate} />
						</div>
					)
				}
			</div>
			<hr class="my-4" />
		</header>
		<Content />
	</article>
</StarlightPage>
